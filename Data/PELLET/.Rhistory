getGO(gene_list,"gene", species= "hsa")
getGO(gene_list,"gene", "hsa")
getGO(gene_list,"gene","hsa")
getGO(gene_list,"gene")
library(annotate)
library(gene.db)
library(getAnnMap)
getSYMBOL(1015, "org.Hs.eg.db")
getSYMBOL(352937, "org.Hs.eg.db")
getSYMBOL("352937", "org.Hs.eg.db")
getSYMBOL("172", "org.Hs.eg.db")
getSYMBOL("286", "org.Hs.eg.db")
getSYMBOL("3002", "org.Hs.eg.db")
source("http://bioconductor.org/biocLite.R")
biocLite("FunctSNP")
FunctSNP.getGO(gene_list, "gene", "hsa")
getGO(gene_list, "gene", "hsa")
getGO(gene_list, "gene")
library(FunctSNP)
?"annFUN.org"
stuff<- annFUN.org(whichOnto= "BP", gene_list, mapping= "org.EcK12.eg.db", ID= "symbol")
??org.EcK12.eg.db
stuff<- annFUN.org(whichOnto= "BP", gene_list, ID= "symbol")
stuff<- annFUN.org(whichOnto= "BP", gene_list, mapping= "org.Hs.eg.db" ID= "symbol")
stuff<- annFUN.org(whichOnto= "BP", gene_list, mapping= "org.Hs.eg.db", ID= "symbol")
all<- factor(as.integer(keep[, 1]))
head(all)
all<- factor(as.integer(keep[, 1]%in%keep[, 1]))
all
all<- factor(as.integer(keep[, 1]%in%keep[, 1]))
names(all)<- keep[, 3]
head(all)
?new
GOdata<- new("topGOdata", ontology="BP", allGenes= all. geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db, ID= "symbol")
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db, ID= "symbol")
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
class(all)
levels(all)
head(all)
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
all<- factor(sizes, levels=names(all))
all<- factor(all, levels=names(all))
all<- factor(as.integer(keep[, 1]%in%keep[, 1]))
names(all)<- keep[, 3]
all<- factor(sizes, levels=c(names(all)))
all<- factor(all, levels=c(names(all)))
all<- factor(as.integer(keep[, 1]%in%keep[, 1]))
names(all)<- keep[, 3]
selection= function(x) TRUE
all<- factor(all, levels=2)
head(all)
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
class(all)
levels(all)
values(all)<- factor(as.integer(keep[, 1]%in%keep[, 1]))
all<- factor(as.integer(keep[, 1]%in%keep[, 1]))
all<- factor(all, levels=1)
all<- factor(all, levels=2)
values(all)<- 1
test<- factor(keep)
crap<- c(keep$symbol, keep$log2FoldChange)
crap<- factor(c(keep$symbol, keep$log2FoldChange))
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
class(crap)
levels(crap)
head(crap)
crap<- c(keep$symbol, keep$log2FoldChange)
view(crap)
View(crap)
crap<- cbind(keep$symbol, keep$log2FoldChange)
View(crap)
crap<- cbind(keep[, 3], keep$log2FoldChange)
View(crap)
View(crap)
View(keep)
keep<- data[data$log2FoldChange<=0, ]
crap<- cbind(keep[, 3], keep$log2FoldChange)
View(crap)
crap<- c(keep[, 3], keep$log2FoldChange)
head(crap)
crap<- c(keep$symbol, keep$log2FoldChange)
crap
crap<- c(keep[, 3:6])
crap<- c(keep[, 3], keep[, 6])
class(crap)
head(crap)
crap<- c(keep[, 3])
all<- factor(as.integer(keep[, 3]%in%keep[, 3]))
names(all)<- keep[, 3]
head(all)
all<- factor(c(all, as.integer(keep[, 6])))
head(all)
names(all)<- keep[, 3]
selection= function(x) TRUE
View(selection)
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
all
all<- c(all, as.integer(keep[, 6]))
head(all)
all<- factor(c(as.integer(keep[, 3]%in%keep[, 3], keep[, 6]))
)
head(all)
all<- factor(cbind(as.integer(keep[, 3]%in%keep[, 3]), keep[, 6]))
all<- factor(as.integer(keep[, 3]%in%keep[, 3]))
names(all)<- keep[, 3]
all<- factor(all, levels=2)
head(all)
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
all<- factor(as.integer(keep[, 3]%in%keep[, 3]))
all<- factor(as.integer(keep[, 3]%in%keep[, 3]))
names(all)<- keep[, 3]
names(all)<- keep[, 3]
Interesting<- keep[, 3]
all<- factor(as.integer(keep[, 3]%in%Interesting))
keep<- data[data$log2FoldChange<=0, ]
all<- factor(as.integer(Data[, 3]%in%Keep[, 3]))
all<- factor(as.integer(Data[, 3]%in%keep[, 3]))
level(all)
levels(all)
all
all<- factor(as.integer(Data[, 3]%in%keep[, 3]))
names(all)<- keep[, 3]
data=read.csv("PC3PelletC1UpSigAKAmir574.csv", header=TRUE)
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
names(all)<- keep[, 3]
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
names(all)
levels(all)
all
names(all)<- data[, 3]
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
all
selection= function(x) TRUE
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= crap, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=20)
allRes[,c('GO.ID', 'Term', 'KS')]
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR574.csv")
data=read.csv("PC3PelletC1DownSigAKA363.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
write.csv(keep, "PC3PelletmiR574filtered.csv")
#next part needs annotate.
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR363.csv")
predicted<- read.delim("SharedmiR20b5p.txt", header= FALSE)
Data<- read.csv("deg_cavin1_gfp.csv", header= TRUE)
PredictedGenes<- predicted$V2
DataGenes<- Data$symbol
Overlap<- unique(PredictedGenes[DataGenes%in% PredictedGenes])
CodingGenes<- Data[Data$biotype=="protein_coding",]
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
UsefulGenes<- SigCG[SigCG$symbol%in%Overlap, ]
write.csv(UsefulGenes, "miR20b5pDowngenes.csv")
data=read.csv("miR20b5pDowngenes.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
write.csv(keep, "PC3PelletmiR20bfiltered.csv")
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR20b.csv")
?order
keep<- order(keep)
View(keep)
keep<- data[data$log2FoldChange>=0, ]
keep<- order(keep$log2FoldChange)
keep<- data[data$log2FoldChange>=0, ]
keep<- keep[order(log2FoldChange)]
keep<- keep[order(keep$log2FoldChange)]
keep<- keep[order(keep$log2FoldChange),]
View(keep)
?order
keep<- keep[order(keep$log2FoldChange, decreasing= TRUE),]
getGOTerm("FAM46C")
?getGOTerm
getGOTerm(gene_list)
library("GO.db")
getGOTerm(gene_list)
write.csv(keep, "OrderedmiR20proteins.csv")
data=read.csv("PC3PelletC1UpSigAKAmir574.csv", header=TRUE)
keep<- data[data$log2FoldChange<=0, ]
keep<- keep[order(keep$log2FoldChange, decreasing= FALSE),]
write.csv(keep, "OrderedmiR574proteins.csv")
data=read.csv("PC3PelletC1DownSigAKA363.csv", header=TRUE)
data=read.csv("PC3PelletC1DownSigAKA363.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
keep<- keep[order(keep$log2FoldChange, decreasing= FALSE),]
write.csv(keep, "OrderedmiR363proteins.csv")
library(topGO)
getwd()
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
data=read.csv("miR20b5pDowngenes.csv", header=TRUE)
#Sorting for only genes that are expected to be changed in expression
#For Upreg miR, protein should be negative and vice versa.
keep<- data[data$log2FoldChange>=0, ]
write.csv(keep, "PC3PelletmiR20bfiltered.csv")
#next part needs annotate.
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="MP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR20bMP.csv")
data=read.csv("PC3PelletC1UpSigAKAmir574.csv", header=TRUE)
keep<- data[data$log2FoldChange<=0, ]
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="MP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
?go_mp
??go_mp
?new
?ontology
data=read.csv("PC3PelletC1UpSigAKAmir574.csv", header=TRUE)
#Sorting for only genes that are expected to be changed in expression
#For Upreg miR, protein should be negative and vice versa.
keep<- data[data$log2FoldChange<=0, ]
#write.csv(keep, "PC3PelletmiR20bfiltered.csv")
#next part needs annotate.
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="MF", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR574MP.csv")
library(topGO)
data=read.csv("miR20b5pDowngenes.csv", header=TRUE)
#Sorting for only genes that are expected to be changed in expression
#For Upreg miR, protein should be negative and vice versa.
keep<- data[data$log2FoldChange>=0, ]
write.csv(keep, "PC3PelletmiR20bfiltered.csv")
#next part needs annotate.
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="MF", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR20bMP.csv")
data=read.csv("PC3PelletC1downSigAKA363.csv", header=TRUE)
#Sorting for only genes that are expected to be changed in expression
#For Upreg miR, protein should be negative and vice versa.
keep<- data[data$log2FoldChange>=0, ]
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="MF", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR363MP.csv")
predicted<- read.delim("PCcav1DownGenes.txt", header= FALSE)
Data<- read.csv("deg_cavin1_gfp.csv", header= TRUE)
PredictedGenes<- predicted$V2
DataGenes<- Data$symbol
Overlap<- unique(PredictedGenes[DataGenes%in% PredictedGenes])
tail(Overlap)
CodingGenes<- Data[Data$biotype=="protein_coding",]
Overlap<- Data$symbol[unique(PredictedGenes[DataGenes%in% PredictedGenes])]
CodingGenes<- Overlap[Overlap$biotype=="protein_coding",]
head(Overlap)
Overlap<- Data[unique(PredictedGenes[DataGenes%in% PredictedGenes])]
Overlap<- Data[, unique(PredictedGenes[DataGenes%in% PredictedGenes])]
Overlap<- Data[, Data$symbol[unique(PredictedGenes[DataGenes%in% PredictedGenes])]]
PredictedGenes<- predicted$V2
DataGenes<- Data$symbol
Overlap<- unique(PredictedGenes[DataGenes%in% PredictedGenes])
CodingGenes<- Data[Data$biotype=="protein_coding",]
CodingGenes<- Data[Data$biotype=="protein_coding",]
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
UsefulGenes<- SigCG[SigCG$symbol%in%Overlap, ]
View(UsefulGenes)
View(UsefulGenes)
View(SigCG)
View(SigCG)
"FAM105A"%in%Overlap
Overlap
"ACOX"%in%DataGenes
"FAM105A"%in%DataGenes
"FAM105A"%in%PredictedGenes
predicted["FAM105A", ]
Data["FAM105A"]
Data["FAM105A", ]
View(Data)
Data[Data$symbol["FAM105A"], ]
UsefulGenes<- SigCG[Overlap%in%SigCG$symbol, ]
View(UsefulGenes)
"FAM105A"%in%UsefulGenes$symbol
View(SigCG)
Overlap%in%SigCG$symbol
Overlap<- unique(PredictedGenes[DataGenes%in% PredictedGenes])
length(Overlap)
Overlap
Overlap<- unique(DataGenes[DataGenes%in%PredictedGenes])
length(Overlap)
CodingGenes<- Data[Data$biotype=="protein_coding",]
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
UsefulGenes<- SigCG[Overlap%in%SigCG$symbol, ]
DataGenes%in%PredictedGenes
number(DataGenes%in%PredictedGenes)
(DataGenes%in%PredictedGenes)
Overlap<- unique(DataGenes[PredictedGenes%in%DataGenes])
length(Overlap)
Overlap<- unique(PredictedGenes%in%DataGenes)
Overlap<- unique(PredictedGenes[PredictedGenes%in%DataGenes])
CodingGenes<- Data[Data$biotype=="protein_coding",]
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
UsefulGenes<- SigCG[Overlap%in%SigCG$symbol, ]
View(UsefulGenes)
rownames(SigCG)<- SigCG[, 2]
rownames(SigCG)<- Data[, 2]
SigCG2<- CodingGenes[CodingGenes$padj<=0.1, ]
rownames(SigCG)<- SigCG2[, 2]
View(SigCG2)
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
rownames(SigCG)<- SigCG[, 2]
rownames(SigCG)<- make.names(SigCG[, 2], unique=TRUE)
View(SigCG)
UsefulGenes<- SigCG[Overlap%in%SigCG$symbol, ]
View(predicted)
Data<- read.csv("deg_cavin1_gfp.csv", header= TRUE)
PredictedGenes<- predicted$V2
DataGenes<- Data$symbol
Overlap<- unique(PredictedGenes[PredictedGenes%in%DataGenes])
length(Overlap)
setdiff(Overlap, PredictedGenes)
setdiff(PredictedGenes, Overlap)
head(Overlap)
"AOAH"%in%DataGenes
"AOAH"%in%PredictedGenes
"ZNF814"%in%PredictedGenes
"ZNF814"%in%DataGenes
CodingGenes<- Data[Data$biotype=="protein_coding",]
View(CodingGenes)
View(SigCG)
SigCG["DUSP1",]
UsefulGenes<- SigCG[Overlap, ]
View(UsefulGenes)
"TTL"%in%Overlap
SigCG["TTL",]
"TTL"%in%PredictedGenes
SigCG[Overlap,]
SigCG[STRA6, ]
SigCG['STRA6', ]
SigCG[head(Overlap),]
head(Overlap)
SigCG["ABCG4", ]
SigCG["ACOX1", ]
CodingGenes[CodingGenes$symbol["ACOX1"], ]
CodingGenes$symbol["ACOX1"]
View(CodingGenes)
Overlap%in%SigCG$symbol
as.integer(Overlap%in%SigCG$symbol)
sum(as.integer(Overlap%in%SigCG$symbol))
UsefulGenes<- SigCG[Overlap[Overlap%in%SigCG$symbol], ]
View(UsefulGenes)
Overlap[Overlap%in%SigCG$symbol]
UsefulGenes<- Overlap[Overlap%in%SigCG$symbol]
Overlap
UsefulGenes<- Overlap[Overlap%in%SigCG$symbol]
Overlap[Overlap%in%SigCG$symbol]
UsefulGenes
length(UsefulGenes)
rownames(Data)<- make.names(Data[, 2], unique=TRUE)
View(Data)
Data["XPO4", ]
Genes<- Data[UsefulGenes,]
View(Genes)
Data[head(UsefulGenes), ]
Data["FAM105A", ]
UsefulGenes
Genes<- Data[UsefulGenes[1],]
View(Genes)
UsefulGenes[1]
Data[1, ]
Genes<- Data[c(UsefulGenes),]
View(Genes)
Genes<- c(Data[UsefulGenes,])
head(Genes)
Genes<- c(Data[UsefulGenes])
Genes<- c(Data[UsefulGenes], )
Genes<- cbind(Data[UsefulGenes, ])
View(Genes)
crap<- "ACOX1", "FAM105A"
crap<- c("ACOX1", "FAM105A")
Data[crap, ]
class(crap)
class(UsefulGenes)
Genes<- Data[as.character(UsefulGenes), ]
View(Genes)
write.csv(UsefulGenes, "OrderedmiR363proteins.csv")
write.csv(Genes, "OrderedmiR363proteins.csv")
predicted<- read.delim("PCcav1UpGenes.txt", header= FALSE)
Data<- read.csv("deg_cavin1_gfp.csv", header= TRUE)
PredictedGenes<- predicted$V2
DataGenes<- Data$symbol
Overlap<- unique(PredictedGenes[PredictedGenes%in%DataGenes])
CodingGenes<- Data[Data$biotype=="protein_coding",]
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
rownames(SigCG)<- make.names(SigCG[, 2], unique=TRUE)
UsefulGenes<- Overlap[Overlap%in%SigCG$symbol]
rownames(Data)<- make.names(Data[, 2], unique=TRUE)
Genes<- Data[as.character(UsefulGenes), ]
write.csv(Genes, "OrderedmiR574proteins.csv")
data=read.csv("PC3PelletC1downSigAKA363.csv", header=TRUE)
#Sorting for only genes that are expected to be changed in expression
#For Upreg miR, protein should be negative and vice versa.
keep<- data[data$log2FoldChange>=0, ]
#write.csv(keep, "PC3PelletmiR20bfiltered.csv")
#next part needs annotate.
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
all
head(all)
predicted<- read.delim("SharedmiR20b5p.txt", header= FALSE)
Data<- read.csv("deg_cavin1_gfp.csv", header= TRUE)
PredictedGenes<- predicted$V2
DataGenes<- Data$symbol
Overlap<- unique(PredictedGenes[PredictedGenes%in%DataGenes])
CodingGenes<- Data[Data$biotype=="protein_coding",]
SigCG<- CodingGenes[CodingGenes$padj<=0.1, ]
rownames(SigCG)<- make.names(SigCG[, 2], unique=TRUE)
UsefulGenes<- Overlap[Overlap%in%SigCG$symbol]
rownames(Data)<- make.names(Data[, 2], unique=TRUE)
Genes<- Data[as.character(UsefulGenes), ]
write.csv(Genes, "OrderedmiR20proteins.csv")
data=read.csv("OrderedmiR20proteins.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR20.csv")
data=read.csv("OrderedmiR574proteins.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
data=read.csv("OrderedmiR574proteins.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
keep<- data[data$log2FoldChange<=0, ]
#write.csv(keep, "PC3PelletmiR20bfiltered.csv")
#next part needs annotate.
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR574.csv")
data=read.csv("OrderedmiR363proteins.csv", header=TRUE)
keep<- data[data$log2FoldChange>=0, ]
all<- factor(as.integer(data[, 3]%in%keep[, 3]))
names(all)<- data[, 3]
selection= function(x) TRUE
GOdata<- new("topGOdata", ontology="BP", allGenes= all, geneSel=function(p) p==1, description= "miR targets", annot=annFUN.org, mapping="org.Hs.eg.db", ID= "symbol")
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=25)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[,c('GO.ID', 'Term', 'KS')], "GOenrichmentMIR363.csv")
