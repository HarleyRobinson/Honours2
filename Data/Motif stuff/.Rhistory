source("http://bioconductor.org/biocLite.R")
biocLite("miRNAtap")
biocLite("miRNAtap.db")
biocLite("org.Hs.eg.db")
?getPredictedTargets
??getPredictedTargets
library(miRNAtap)
library(org.Hs.eg.db)
mir= 'miR-363-3p'
predictions = getPredictedTargets(mir, species ='hsa', method = 'geom')
View(predictions)
library(annotate)
test<- getSYMBOL(c(head(rownames(predictions))))
test<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
test
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
View(predictions)
View(predictions)
predictions = getPredictedTargets(mir, species ='hsa', method = 'max')
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
View(predictions)
View(predictions)
predictions = getPredictedTargets(mir, sources= 'miranda', species ='hsa', method = 'max')
predictions = getPredictedTargets(mir, sources= 'miranda', species ='hsa', method = 'max', min_src=1)
mir= 'miR-363'
predictions = getPredictedTargets(mir, sources= 'miranda', species ='hsa', method = 'max', min_src=1)
View(predictions)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
predictions = getPredictedTargets(mir, sources= 'miranda', species ='hsa', method = 'max', min_src=1)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=1)
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
'AAk1' %in%rownames(predictions)
'MTHFR' %in%rownames(predictions)
'CIC' %in%rownames(predictions)
'YDEL1' %in%rownames(predictions)
View(predictions)
'NOX' %in% rownames(predictions)
'NOX4' %in% rownames(predictions)
'POLH' %in% rownames(predictions)
mir= 'miR-363-3p'
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
mir= 'miR-363'
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
mir2= 'miR-20b'
pred20b= getPredictedTargets(mir2, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred20b)<- getSYMBOL(rownames(pred20b), data= 'org.Hs.eg')
rownames(pred20) %in% rownames(predictions)
rownames(pred20b) %in% rownames(predictions)
predictions[, "miR"]<- 'miR-363'
predictions[, "miR"]<- rep('miR-363', nrow(predictions))
nrow(predictions)
predictions$miR<- rep('miR-363', nrow(predictions))
View(pred20b)
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
predictions[miR]<- rep('miR-363', nrow(predictions))
predictions[, miR]<- rep('miR-363', nrow(predictions))
predictions[, 'miR']<- rep('miR-363', nrow(predictions))
predictions[, 'miR']<- NA
predictions['miR']<- rep('miR-363', nrow(predictions))
head (predictions)
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
predictions['miR']<- NA
class(predictions)
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
View(predictions)
View(predictions)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
class(predictions)
predictions<- cbind(predictions, apply(rep('miR-363', nrow(predictions))))
predictions<- cbind(predictions, apply(predictions[, 5],rep('miR-363', nrow(predictions))))
predictions<- cbind(predictions, c(rep('miR-363', nrow(predictions)))
)
View(predictions)
View(predictions)
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
predictions<- cbind(predictions, c(rep(mir, nrow(predictions)))
)
View(predictions)
View(predictions)
mir2= 'miR-20b'
pred20b= getPredictedTargets(mir2, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred20b)<- getSYMBOL(rownames(pred20b), data= 'org.Hs.eg')
pred20b<- cbind(pred20b, c(rep(mir2, nrow(pred20b))))
View(pred20b)
mir3= "miR-106a"
pred3= getPredictedTargets(mir3, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred3)<- getSYMBOL(rownames(pred3), data= 'org.Hs.eg')
pred3<- cbind(pred3, c(rep(mir3, nrow(pred3))))
View(pred3)
View(pred3)
write.csv(predictions, 'mir-363predictions.csv')
pwd
getwd()
total<- rbind(predictions, pred20b, pred3)
write.csv(total, 'mir-363predictions.csv')
?write.csv
write.csv(total, 'mir-363predictions.csv', rownames=TRUE)
write.csv(total, 'mir-363predictions.csv', row.names=TRUE)
mir4= 'miR-17-5p'
pred4= getPredictedTargets(mir4, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred4)<- getSYMBOL(rownames(pred4), data= 'org.Hs.eg')
pred4<- cbind(pred4, c(rep(mir4, nrow(pred4))))
mir4= 'miR-17'
pred4= getPredictedTargets(mir4, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred4)<- getSYMBOL(rownames(pred4), data= 'org.Hs.eg')
pred4<- cbind(pred4, c(rep(mir4, nrow(pred4))))
View(pred4)
View(pred4)
mir5= 'miR-20a'
pred5= getPredictedTargets(mir5, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred5)<- getSYMBOL(rownames(pred5), data= 'org.Hs.eg')
pred5<- cbind(pred5, c(rep(mir5, nrow(pred5))))
mir6= 'miR-125b-2'
pred6= getPredictedTargets(mir6, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred6)<- getSYMBOL(rownames(pred6), data= 'org.Hs.eg')
pred6<- cbind(pred6, c(rep(mir6, nrow(pred6))))
mir6= 'miR-125b-2'
pred6= getPredictedTargets(mir6, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=1)
rownames(pred6)<- getSYMBOL(rownames(pred6), data= 'org.Hs.eg')
pred6<- cbind(pred6, c(rep(mir6, nrow(pred6))))
View(pred6)
mir6= 'miR-125b-2'
pred6= getPredictedTargets(mir6, sources= c("miranda", "targetscan", "diana"), species ='hsa', method = 'max', min_src=2)
rownames(pred6)<- getSYMBOL(rownames(pred6), data= 'org.Hs.eg')
pred6<- cbind(pred6, c(rep(mir6, nrow(pred6))))
mir6= 'miR-125b'
pred6= getPredictedTargets(mir6, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred6)<- getSYMBOL(rownames(pred6), data= 'org.Hs.eg')
pred6<- cbind(pred6, c(rep(mir6, nrow(pred6))))
mir7= 'miR-203a'
pred7= getPredictedTargets(mir7, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred7)<- getSYMBOL(rownames(pred7), data= 'org.Hs.eg')
pred7<- cbind(pred7, c(rep(mir7, nrow(pred7))))
total<- rbind(predictions, pred20b, pred3, pred4, pred5, pred6)
write.csv(total, 'mir-363predictions.csv', row.names=TRUE)
library(topGO)
rankedGenes= total[, 'rank_product']
selection= function(x) TRUE
allGO2genes= annFUN.org(whichOnto= 'BP', mapping='org.Hs.eg.db')
Godata= new('topGOdata', ontology= 'BP', allGenes= rankedGenes)
Godata= new('topGOdata', ontology= 'BP', allGenes= rankedGenes, annot= annFUN.GO2genes, GO2genes= allGO2genes, geneSel= selection, nodeSize=10)
class(rankedGenes)
head (rankedGenes)
rankedGenes
Godata= new('topGOdata', ontology= 'BP', allGenes= as.numeric(rankedGenes), annot= annFUN.GO2genes, GO2genes= allGO2genes, geneSel= selection, nodeSize=10)
rankedGenes<- as.numeric(rankedGenes)
head(rankedGenes)
Godata= new('topGOdata', ontology= 'BP', allGenes= rankedGenes, annot= annFUN.GO2genes, GO2genes= allGO2genes, geneSel= selection, nodeSize=10)
rankedGenes<- total[, 'rank_product']
Godata= new('topGOdata', ontology= 'BP', allGenes= rankedGenes, annot= annFUN.GO2genes, GO2genes= allGO2genes, geneSel= selection, nodeSize=10)
class(rankedGenes)
class(rankedGenes[2])
head(rankedGenes)
pred6b= getPredictedTargets(mir6, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
pred5b= getPredictedTargets(mir5, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
pred4b= getPredictedTargets(mir4, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
pred3b= getPredictedTargets(mir3, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
pred20bb= getPredictedTargets(mir2, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
predictionsb = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
totalb<- rbind(predictionsb, pred20bb, pred3b, pred4b, pred5b, pred6b)
rankedGenes<- totalb[, 'rank_product']
selection= function(x) TRUE
allGoGenes= annFUN.org(whichOnto= 'BP', feasibleGenes= NULL, mapping= 'org.Hs.eg.db', ID= 'entrez')
GOdata= new('topGodata', ontology= 'BP', allGenes= rankedGenes, annot= annFUN.GO2genes, GO2genes = allGoGenes, geneSel= selection, nodeSize=10)
?topGOdata
??topGOdata
library(topGO)
GOdata= new('topGOdata', ontology= 'BP', allGenes= rankedGenes, annot= annFUN.GO2genes, GO2genes = allGoGenes, geneSel= selection, nodeSize=10)
results.ks= runTest(GOdata, algorithm = "classic", statistic = "ks")
results.ks
allRes= GenTable(GOdata, KS= results.ks, orderBy= 'KS', topNodes=20)
allRes[,c('GO.ID', 'Term', 'KS')]
write.csv(allRes[, c('GO.ID', 'Term', 'KS')], 'C3Dtopgoanalysis.csv')
mir= 'miR-210'
predictions = getPredictedTargets(mir, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
predictions<- cbind(predictions, c(rep(mir, nrow(predictions))))
mir2= 'miR-574-5p'
pred20b= getPredictedTargets(mir2, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred20b)<- getSYMBOL(rownames(pred20b), data= 'org.Hs.eg')
pred20b<- cbind(pred20b, c(rep(mir2, nrow(pred20b))))
total<- rbind(predictions, pred20b)
write.csv(total, 'mir-363predictions.csv', row.names=TRUE)
mir= 'miR-363'
predictions = getPredictedTargets(mir, species ='hsa', method = 'max', min_src=2)
rownames(predictions)<- getSYMBOL(rownames(predictions), data= 'org.Hs.eg')
predictions<- cbind(predictions, c(rep(mir, nrow(predictions))))
mir2= 'miR-20b'
pred20b= getPredictedTargets(mir2, species ='hsa', method = 'max', min_src=2)
rownames(pred20b)<- getSYMBOL(rownames(pred20b), data= 'org.Hs.eg')
pred20b<- cbind(pred20b, c(rep(mir2, nrow(pred20b))))
mir3= "miR-106a"
pred3= getPredictedTargets(mir3, species ='hsa', method = 'max', min_src=2)
rownames(pred3)<- getSYMBOL(rownames(pred3), data= 'org.Hs.eg')
pred3<- cbind(pred3, c(rep(mir3, nrow(pred3))))
mir4= 'miR-17'
pred4= getPredictedTargets(mir4, species ='hsa', method = 'max', min_src=2)
rownames(pred4)<- getSYMBOL(rownames(pred4), data= 'org.Hs.eg')
pred4<- cbind(pred4, c(rep(mir4, nrow(pred4))))
mir5= 'miR-20a'
pred5= getPredictedTargets(mir5, species ='hsa', method = 'max', min_src=2)
rownames(pred5)<- getSYMBOL(rownames(pred5), data= 'org.Hs.eg')
pred5<- cbind(pred5, c(rep(mir5, nrow(pred5))))
mir6= 'miR-125b'
pred6= getPredictedTargets(mir6, species ='hsa', method = 'max', min_src=2)
rownames(pred6)<- getSYMBOL(rownames(pred6), data= 'org.Hs.eg')
pred6<- cbind(pred6, c(rep(mir6, nrow(pred6))))
mir7= 'miR-203a'
pred7= getPredictedTargets(mir7, sources= c("miranda", "targetscan"), species ='hsa', method = 'max', min_src=2)
rownames(pred7)<- getSYMBOL(rownames(pred7), data= 'org.Hs.eg')
pred7<- cbind(pred7, c(rep(mir7, nrow(pred7))))
total<- rbind(predictions, pred20b, pred3, pred4, pred5, pred6)
write.csv(total, 'mir-363predictions.csv', row.names=TRUE)
DESeq2::dds
??DESeq2::dds
??DESeq2::results
mir<- "UCAGUGCACUACAGAACUUUGU"
str_shuffle(mir)
sample(mir)
set.seed(001)
sample(mir)
sample(mir)
sample(mir, 1)
mir<- as.vector(mir)
sample(mir)
typeof(mir)
mir
mir<-c("U","C","A","G","U","G","C","A","C","U","A","C","A","G","A","A","C","U","U","U","G","U")
sample(mir)
mir
i=1
for (i in range(1:100)) {
mir<- sample(mir)
i=i+1
}
mir
i=1
for (i in range(1:100)) {
mir<- sample(mir)
i=i+1
}
mir
i=1
for (i in range(1:100)) {
mir<- sample(mir)
i=i+1
}
print(mir)
library(seqLogo)
source("https://bioconductor.org/biocLite.R")
biocLite("seqLogo")
library("seqLogo")
PWM<- read.table("TestMotifForLogo.txt")
PWM<- read.file("TestMotifForLogo.txt")
PWM<- read.delim("TestMotifForLogo.txt")
View(PWM)
PWM<- read.delim("TestMotifForLogo.txt", sep= " ")
??read.delim
?seq
?sep
PWM<- read.delim("TestMotifForLogo.txt", sep= '')
PWM<- read.delim("TestMotifForLogo.txt", sep= ' ')
View(PWM)
PWM<- read.delim("TestMotifForLogo.txt", sep=' ')
View(PWM)
PWM<- read.delim("trmAgAwCyMotif.txt", sep=' ')
View(PWM)
PWM<- read.delim("trmAgAwCyMotif.txt", sep='')
View(PWM)
typeof(PWM)
as.table(PWM)
as.data.frame(PWM)
PWM<- as.data.frame(PWM)
PWM<- as.table(PWM)
p<- makePWM(PWM)
seqLogo(PWM)
0.000000  0.000000  0.000000  1.000000
0.000000  0.200000  0.800000  0.000000
0.000000  0.600000  0.000000  0.400000
0.800000  0.000000  0.000000  0.200000
0.200000  0.400000  0.400000  0.000000
0.400000  0.000000  0.400000  0.200000
1.000000  0.000000  0.000000  0.000000
0.000000  1.000000  0.000000  0.000000
0.200000  0.400000  0.000000  0.400000
0.000000  0.000000  1.000000  0.000000
p<-  0.000000  0.000000  0.000000  1.000000
0.000000  0.200000  0.800000  0.000000
0.000000  0.600000  0.000000  0.400000
0.800000  0.000000  0.000000  0.200000
0.200000  0.400000  0.400000  0.000000
0.400000  0.000000  0.400000  0.200000
1.000000  0.000000  0.000000  0.000000
0.000000  1.000000  0.000000  0.000000
0.200000  0.400000  0.000000  0.400000
0.000000  0.000000  1.000000  0.000000
p<-  "0.000000  0.000000  0.000000  1.000000
0.000000  0.200000  0.800000  0.000000
0.000000  0.600000  0.000000  0.400000
0.800000  0.000000  0.000000  0.200000
0.200000  0.400000  0.400000  0.000000
0.400000  0.000000  0.400000  0.200000
1.000000  0.000000  0.000000  0.000000
0.000000  1.000000  0.000000  0.000000
0.200000  0.400000  0.000000  0.400000
0.000000  0.000000  1.000000  0.000000"
p<- makePWM(p)
p<- as.data.frame(p)
View(p)
p[1,]<- 0, 0, 0, 1
p[1,]<- '0', '0', '0', '1'
p[1,1]<- '0'
g[1,1]<- '1'
PWM<- read.delim("test.txt", sep='')
View(PWM)
p<- makePWM(p)
PWM<- as.data.frame(t(PWM))
View(PWM)
p<- makePWM(p)
View(PWM)
nrow(PWM)
p<- makePWM(PWM)
seqLogo(p)
setwd("~/GITSTUFF/Data/Motif stuff")
data <- read.csv("HeatMapTest.csv", comment.char="#")
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
data <- read.csv("HeatMapTest.csv", comment.char="#")
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-5 into a matrix
rownames(mat_data) <- rnames
rnames
mat_data
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
png("../images/heatmaps_in_r.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
col_breaks
png("../images/heatmaps_in_r.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
col_breaks = c(seq(-1,0.0001,length=100),  # for red
seq(0.0002,0.8,length=100),              # for yellow
seq(0.80001,1,length=100))              # for green
png("../images/heatmaps_in_r.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
png("Maps.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
col_breaks = c(seq(-9,-5,length=100),  # for red
seq(-5.001,0,length=100),              # for yellow
seq(0.001,5,length=100))              # for green
png("Maps.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
col_breaks = c(seq(-9,0,length=100),  # for red
seq(0.1,2,length=100),              # for yellow
seq(2.1,5,length=100))
png("Maps.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
